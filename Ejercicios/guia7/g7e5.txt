a)
recorrido por niveles y voy comparando diferencia de nodos adyacentes:

traverse(arbol t, array v)
{
    i = 0
    c.encolar(t)

    while(c.vacia() == false)
    {
        aux = c.desencolar()
        v[i] = aux->clave

        if(aux->izq != NULL)
            c.encolar(aux->izq)
        if(aux->der != NULL)
            c.encolar(aux->der)
        i++
    }
}

encontrarMinDist(arbol t)
{
    traverse(t, v)
    min = v[0]
    for(i = 0, k = 1; i<length(v); k *= 2, i++)
    {
        j = 0
        while(j < (k - 1) && k>1)
        {
            temp = v[i + 1] - v[i]
            if(abs(temp)<min)
                min = abs(temp)
            i++
            j++
        }
    }
    return min
}

Complejidad espacial = O(1)

b) Si n == 1, no hay min distancia. Una vez que tengo el máximo del subarbol derecho
e izquierdo comparo los nodos aydacentes entre ambos subárboles. Luego me quedo o con
el mínimo izquierdo (a), el derecho (b) o el del "medio" (nodos adyacentes entre izq y der)
(c). considero que puntero null es mayor que cualquier número entero positivo.

encontrarMinDist(arbol t)
{
    if(t.n == 1)
        return null

    *a = encontrarMinDist(t.izq)
    *b = encontrarMinDist(t.der)
    nodo_izq = t.izq
    nodo_der = t.der
    *c = abs(nodo_izq->clave - nodo_der->clave)
    for(i = 0; nodo_izq != NULL && nodo_der != NULL; i++)
    {
        if(i es par)
        {
            nodo_izq = nodo_izq.der
            nodo_der = nodo_der.izq
        }
        else
        {
            nodo_izq = nodo_izq.izq
            nodo_der = nodo_der.der
        }
        temp = abs(nodo_izq->clave - nodo_der->clave)
        if(temp < *c)
            *c = temp
    }
    if(*c < *a && *c < *b)
        return c
    else if(*a<*c && *a<*b)
        return a
    else
        return b
}

T(n) = 2T(n/2) + log(n + 1)

Esta está acotado superiormente por T2(n) = 2T(n/2) + n, y por teorema maestro esto da 
T2(n) pertenciente a tita(n*log(n)), e inferiormente por T3(n) = 2T(n/2) + 1 pertenciente a tita(n).
Complejdidad espacial = O(log(n))